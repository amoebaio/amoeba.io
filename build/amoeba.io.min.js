/*! amoeba.io 0.0.7 */
!function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i="function"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);var j=new Error("Cannot find module '"+g+"'");throw j.code="MODULE_NOT_FOUND",j}var k=c[g]={exports:{}};b[g][0].call(k.exports,function(a){var c=b[g][1][a];return e(c?c:a)},k,k.exports,a,b,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b,c){ClientHolder=function(a,b){this.service=b,this.client=a,this.behaviors_list=[]},ClientHolder.prototype.invoke=function(a,b,c){var d=this.behaviors("before_invoke"),e=this.behaviors("after_invoke"),f={service:this.service,method:a,params:b,callback:c},g=-1,h=this.client,i=function(){0===arguments.length||1===arguments.length&&arguments[0]===!0?(g++,d&&d[g]?d[g](f,i):h.invoke(f.service,f.method,f.params,function(a,b){var c=-1;f.err=a,f.result=b;var d=function(){c++,e&&e[c]?e[c](f,d):f.callback(f.err,f.result)};d()})):f.callback(f.err,f.result)};i()},ClientHolder.prototype.behavior=function(a,b){this.behaviors_list[a]||(this.behaviors_list[a]=[]),this.behaviors_list[a].push(b)},ClientHolder.prototype.behaviors=function(a){return this.behaviors_list[a]},b.exports=c=ClientHolder},{}],2:[function(a,b,c){var d=a("./amoeba-client-holder");Amoeba=function(){this.servers=[],this.serviceHolders=[]},Amoeba.prototype.service=function(){if(1==arguments.length)return this.serviceHolders[arguments[0]];if(2==arguments.length){var a=new d(arguments[1],arguments[0]);return this.serviceHolders[arguments[0]]=a,a}},Amoeba.prototype.server=function(a){a.eventer(this),this.servers.push(a)},b.exports=c=Amoeba},{"./amoeba-client-holder":1}]},{},[1,2]);